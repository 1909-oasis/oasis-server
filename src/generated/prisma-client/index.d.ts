// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  cocktail: (where?: CocktailWhereInput) => Promise<boolean>;
  cocktailIngredient: (
    where?: CocktailIngredientWhereInput
  ) => Promise<boolean>;
  ingredient: (where?: IngredientWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userCocktail: (where?: UserCocktailWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  cocktail: (where: CocktailWhereUniqueInput) => CocktailNullablePromise;
  cocktails: (args?: {
    where?: CocktailWhereInput;
    orderBy?: CocktailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Cocktail>;
  cocktailsConnection: (args?: {
    where?: CocktailWhereInput;
    orderBy?: CocktailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CocktailConnectionPromise;
  cocktailIngredient: (
    where: CocktailIngredientWhereUniqueInput
  ) => CocktailIngredientNullablePromise;
  cocktailIngredients: (args?: {
    where?: CocktailIngredientWhereInput;
    orderBy?: CocktailIngredientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CocktailIngredient>;
  cocktailIngredientsConnection: (args?: {
    where?: CocktailIngredientWhereInput;
    orderBy?: CocktailIngredientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CocktailIngredientConnectionPromise;
  ingredient: (where: IngredientWhereUniqueInput) => IngredientNullablePromise;
  ingredients: (args?: {
    where?: IngredientWhereInput;
    orderBy?: IngredientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Ingredient>;
  ingredientsConnection: (args?: {
    where?: IngredientWhereInput;
    orderBy?: IngredientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => IngredientConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  userCocktail: (
    where: UserCocktailWhereUniqueInput
  ) => UserCocktailNullablePromise;
  userCocktails: (args?: {
    where?: UserCocktailWhereInput;
    orderBy?: UserCocktailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserCocktail>;
  userCocktailsConnection: (args?: {
    where?: UserCocktailWhereInput;
    orderBy?: UserCocktailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserCocktailConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCocktail: (data: CocktailCreateInput) => CocktailPromise;
  updateCocktail: (args: {
    data: CocktailUpdateInput;
    where: CocktailWhereUniqueInput;
  }) => CocktailPromise;
  updateManyCocktails: (args: {
    data: CocktailUpdateManyMutationInput;
    where?: CocktailWhereInput;
  }) => BatchPayloadPromise;
  upsertCocktail: (args: {
    where: CocktailWhereUniqueInput;
    create: CocktailCreateInput;
    update: CocktailUpdateInput;
  }) => CocktailPromise;
  deleteCocktail: (where: CocktailWhereUniqueInput) => CocktailPromise;
  deleteManyCocktails: (where?: CocktailWhereInput) => BatchPayloadPromise;
  createCocktailIngredient: (
    data: CocktailIngredientCreateInput
  ) => CocktailIngredientPromise;
  updateCocktailIngredient: (args: {
    data: CocktailIngredientUpdateInput;
    where: CocktailIngredientWhereUniqueInput;
  }) => CocktailIngredientPromise;
  updateManyCocktailIngredients: (args: {
    data: CocktailIngredientUpdateManyMutationInput;
    where?: CocktailIngredientWhereInput;
  }) => BatchPayloadPromise;
  upsertCocktailIngredient: (args: {
    where: CocktailIngredientWhereUniqueInput;
    create: CocktailIngredientCreateInput;
    update: CocktailIngredientUpdateInput;
  }) => CocktailIngredientPromise;
  deleteCocktailIngredient: (
    where: CocktailIngredientWhereUniqueInput
  ) => CocktailIngredientPromise;
  deleteManyCocktailIngredients: (
    where?: CocktailIngredientWhereInput
  ) => BatchPayloadPromise;
  createIngredient: (data: IngredientCreateInput) => IngredientPromise;
  updateIngredient: (args: {
    data: IngredientUpdateInput;
    where: IngredientWhereUniqueInput;
  }) => IngredientPromise;
  updateManyIngredients: (args: {
    data: IngredientUpdateManyMutationInput;
    where?: IngredientWhereInput;
  }) => BatchPayloadPromise;
  upsertIngredient: (args: {
    where: IngredientWhereUniqueInput;
    create: IngredientCreateInput;
    update: IngredientUpdateInput;
  }) => IngredientPromise;
  deleteIngredient: (where: IngredientWhereUniqueInput) => IngredientPromise;
  deleteManyIngredients: (where?: IngredientWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserCocktail: (data: UserCocktailCreateInput) => UserCocktailPromise;
  updateUserCocktail: (args: {
    data: UserCocktailUpdateInput;
    where: UserCocktailWhereUniqueInput;
  }) => UserCocktailPromise;
  updateManyUserCocktails: (args: {
    data: UserCocktailUpdateManyMutationInput;
    where?: UserCocktailWhereInput;
  }) => BatchPayloadPromise;
  upsertUserCocktail: (args: {
    where: UserCocktailWhereUniqueInput;
    create: UserCocktailCreateInput;
    update: UserCocktailUpdateInput;
  }) => UserCocktailPromise;
  deleteUserCocktail: (
    where: UserCocktailWhereUniqueInput
  ) => UserCocktailPromise;
  deleteManyUserCocktails: (
    where?: UserCocktailWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  cocktail: (
    where?: CocktailSubscriptionWhereInput
  ) => CocktailSubscriptionPayloadSubscription;
  cocktailIngredient: (
    where?: CocktailIngredientSubscriptionWhereInput
  ) => CocktailIngredientSubscriptionPayloadSubscription;
  ingredient: (
    where?: IngredientSubscriptionWhereInput
  ) => IngredientSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userCocktail: (
    where?: UserCocktailSubscriptionWhereInput
  ) => UserCocktailSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CocktailIngredientOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "measure_ASC"
  | "measure_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type CocktailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "alcoholic_ASC"
  | "alcoholic_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "starterPack_ASC"
  | "starterPack_DESC"
  | "totalRating_ASC"
  | "totalRating_DESC"
  | "totalVotes_ASC"
  | "totalVotes_DESC"
  | "recommendedCount_ASC"
  | "recommendedCount_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type IngredientOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserCocktailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "recommended_ASC"
  | "recommended_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "password_ASC"
  | "password_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export interface CocktailUpdateOneRequiredInput {
  create?: Maybe<CocktailCreateInput>;
  update?: Maybe<CocktailUpdateDataInput>;
  upsert?: Maybe<CocktailUpsertNestedInput>;
  connect?: Maybe<CocktailWhereUniqueInput>;
}

export type CocktailWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface IngredientCreateOneInput {
  create?: Maybe<IngredientCreateInput>;
  connect?: Maybe<IngredientWhereUniqueInput>;
}

export interface IngredientWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<IngredientWhereInput[] | IngredientWhereInput>;
  OR?: Maybe<IngredientWhereInput[] | IngredientWhereInput>;
  NOT?: Maybe<IngredientWhereInput[] | IngredientWhereInput>;
}

export interface IngredientCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface CocktailSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CocktailWhereInput>;
  AND?: Maybe<
    CocktailSubscriptionWhereInput[] | CocktailSubscriptionWhereInput
  >;
  OR?: Maybe<CocktailSubscriptionWhereInput[] | CocktailSubscriptionWhereInput>;
  NOT?: Maybe<
    CocktailSubscriptionWhereInput[] | CocktailSubscriptionWhereInput
  >;
}

export interface CocktailUpdateInput {
  name?: Maybe<String>;
  alcoholic?: Maybe<Boolean>;
  imageUrl?: Maybe<String>;
  starterPack?: Maybe<Boolean>;
  totalRating?: Maybe<Int>;
  totalVotes?: Maybe<Int>;
  recommendedCount?: Maybe<Int>;
  ingredients?: Maybe<CocktailIngredientUpdateManyWithoutCocktailInput>;
}

export interface CocktailIngredientWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  measure?: Maybe<String>;
  measure_not?: Maybe<String>;
  measure_in?: Maybe<String[] | String>;
  measure_not_in?: Maybe<String[] | String>;
  measure_lt?: Maybe<String>;
  measure_lte?: Maybe<String>;
  measure_gt?: Maybe<String>;
  measure_gte?: Maybe<String>;
  measure_contains?: Maybe<String>;
  measure_not_contains?: Maybe<String>;
  measure_starts_with?: Maybe<String>;
  measure_not_starts_with?: Maybe<String>;
  measure_ends_with?: Maybe<String>;
  measure_not_ends_with?: Maybe<String>;
  cocktail?: Maybe<CocktailWhereInput>;
  ingredient?: Maybe<IngredientWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CocktailIngredientWhereInput[] | CocktailIngredientWhereInput>;
  OR?: Maybe<CocktailIngredientWhereInput[] | CocktailIngredientWhereInput>;
  NOT?: Maybe<CocktailIngredientWhereInput[] | CocktailIngredientWhereInput>;
}

export interface CocktailIngredientUpdateManyWithoutCocktailInput {
  create?: Maybe<
    | CocktailIngredientCreateWithoutCocktailInput[]
    | CocktailIngredientCreateWithoutCocktailInput
  >;
  delete?: Maybe<
    CocktailIngredientWhereUniqueInput[] | CocktailIngredientWhereUniqueInput
  >;
  connect?: Maybe<
    CocktailIngredientWhereUniqueInput[] | CocktailIngredientWhereUniqueInput
  >;
  set?: Maybe<
    CocktailIngredientWhereUniqueInput[] | CocktailIngredientWhereUniqueInput
  >;
  disconnect?: Maybe<
    CocktailIngredientWhereUniqueInput[] | CocktailIngredientWhereUniqueInput
  >;
  update?: Maybe<
    | CocktailIngredientUpdateWithWhereUniqueWithoutCocktailInput[]
    | CocktailIngredientUpdateWithWhereUniqueWithoutCocktailInput
  >;
  upsert?: Maybe<
    | CocktailIngredientUpsertWithWhereUniqueWithoutCocktailInput[]
    | CocktailIngredientUpsertWithWhereUniqueWithoutCocktailInput
  >;
  deleteMany?: Maybe<
    CocktailIngredientScalarWhereInput[] | CocktailIngredientScalarWhereInput
  >;
  updateMany?: Maybe<
    | CocktailIngredientUpdateManyWithWhereNestedInput[]
    | CocktailIngredientUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithoutVotesDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  queue?: Maybe<CocktailUpdateManyInput>;
}

export interface CocktailIngredientUpdateWithWhereUniqueWithoutCocktailInput {
  where: CocktailIngredientWhereUniqueInput;
  data: CocktailIngredientUpdateWithoutCocktailDataInput;
}

export interface UserCocktailUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutVotesInput>;
  cocktail?: Maybe<CocktailUpdateOneRequiredInput>;
  rating?: Maybe<Int>;
  recommended?: Maybe<Boolean>;
}

export interface CocktailIngredientUpdateWithoutCocktailDataInput {
  measure?: Maybe<String>;
  ingredient?: Maybe<IngredientUpdateOneRequiredInput>;
}

export interface UserCreateWithoutVotesInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  password: String;
  email: String;
  queue?: Maybe<CocktailCreateManyInput>;
}

export interface IngredientUpdateOneRequiredInput {
  create?: Maybe<IngredientCreateInput>;
  update?: Maybe<IngredientUpdateDataInput>;
  upsert?: Maybe<IngredientUpsertNestedInput>;
  connect?: Maybe<IngredientWhereUniqueInput>;
}

export interface UserCocktailCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutVotesInput;
  cocktail: CocktailCreateOneInput;
  rating: Int;
  recommended: Boolean;
}

export interface IngredientUpdateDataInput {
  name?: Maybe<String>;
}

export interface CocktailIngredientSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CocktailIngredientWhereInput>;
  AND?: Maybe<
    | CocktailIngredientSubscriptionWhereInput[]
    | CocktailIngredientSubscriptionWhereInput
  >;
  OR?: Maybe<
    | CocktailIngredientSubscriptionWhereInput[]
    | CocktailIngredientSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | CocktailIngredientSubscriptionWhereInput[]
    | CocktailIngredientSubscriptionWhereInput
  >;
}

export interface IngredientUpsertNestedInput {
  update: IngredientUpdateDataInput;
  create: IngredientCreateInput;
}

export interface CocktailUpdateManyDataInput {
  name?: Maybe<String>;
  alcoholic?: Maybe<Boolean>;
  imageUrl?: Maybe<String>;
  starterPack?: Maybe<Boolean>;
  totalRating?: Maybe<Int>;
  totalVotes?: Maybe<Int>;
  recommendedCount?: Maybe<Int>;
}

export interface CocktailIngredientUpsertWithWhereUniqueWithoutCocktailInput {
  where: CocktailIngredientWhereUniqueInput;
  update: CocktailIngredientUpdateWithoutCocktailDataInput;
  create: CocktailIngredientCreateWithoutCocktailInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface CocktailIngredientScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  measure?: Maybe<String>;
  measure_not?: Maybe<String>;
  measure_in?: Maybe<String[] | String>;
  measure_not_in?: Maybe<String[] | String>;
  measure_lt?: Maybe<String>;
  measure_lte?: Maybe<String>;
  measure_gt?: Maybe<String>;
  measure_gte?: Maybe<String>;
  measure_contains?: Maybe<String>;
  measure_not_contains?: Maybe<String>;
  measure_starts_with?: Maybe<String>;
  measure_not_starts_with?: Maybe<String>;
  measure_ends_with?: Maybe<String>;
  measure_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    CocktailIngredientScalarWhereInput[] | CocktailIngredientScalarWhereInput
  >;
  OR?: Maybe<
    CocktailIngredientScalarWhereInput[] | CocktailIngredientScalarWhereInput
  >;
  NOT?: Maybe<
    CocktailIngredientScalarWhereInput[] | CocktailIngredientScalarWhereInput
  >;
}

export interface UserCocktailWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  cocktail?: Maybe<CocktailWhereInput>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  recommended?: Maybe<Boolean>;
  recommended_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserCocktailWhereInput[] | UserCocktailWhereInput>;
  OR?: Maybe<UserCocktailWhereInput[] | UserCocktailWhereInput>;
  NOT?: Maybe<UserCocktailWhereInput[] | UserCocktailWhereInput>;
}

export interface CocktailIngredientUpdateManyWithWhereNestedInput {
  where: CocktailIngredientScalarWhereInput;
  data: CocktailIngredientUpdateManyDataInput;
}

export interface IngredientSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<IngredientWhereInput>;
  AND?: Maybe<
    IngredientSubscriptionWhereInput[] | IngredientSubscriptionWhereInput
  >;
  OR?: Maybe<
    IngredientSubscriptionWhereInput[] | IngredientSubscriptionWhereInput
  >;
  NOT?: Maybe<
    IngredientSubscriptionWhereInput[] | IngredientSubscriptionWhereInput
  >;
}

export interface CocktailIngredientUpdateManyDataInput {
  measure?: Maybe<String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface CocktailUpdateManyMutationInput {
  name?: Maybe<String>;
  alcoholic?: Maybe<Boolean>;
  imageUrl?: Maybe<String>;
  starterPack?: Maybe<Boolean>;
  totalRating?: Maybe<Int>;
  totalVotes?: Maybe<Int>;
  recommendedCount?: Maybe<Int>;
}

export interface CocktailUpdateManyInput {
  create?: Maybe<CocktailCreateInput[] | CocktailCreateInput>;
  update?: Maybe<
    | CocktailUpdateWithWhereUniqueNestedInput[]
    | CocktailUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | CocktailUpsertWithWhereUniqueNestedInput[]
    | CocktailUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<CocktailWhereUniqueInput[] | CocktailWhereUniqueInput>;
  connect?: Maybe<CocktailWhereUniqueInput[] | CocktailWhereUniqueInput>;
  set?: Maybe<CocktailWhereUniqueInput[] | CocktailWhereUniqueInput>;
  disconnect?: Maybe<CocktailWhereUniqueInput[] | CocktailWhereUniqueInput>;
  deleteMany?: Maybe<CocktailScalarWhereInput[] | CocktailScalarWhereInput>;
  updateMany?: Maybe<
    | CocktailUpdateManyWithWhereNestedInput[]
    | CocktailUpdateManyWithWhereNestedInput
  >;
}

export interface CocktailUpsertNestedInput {
  update: CocktailUpdateDataInput;
  create: CocktailCreateInput;
}

export type UserCocktailWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CocktailUpdateDataInput {
  name?: Maybe<String>;
  alcoholic?: Maybe<Boolean>;
  imageUrl?: Maybe<String>;
  starterPack?: Maybe<Boolean>;
  totalRating?: Maybe<Int>;
  totalVotes?: Maybe<Int>;
  recommendedCount?: Maybe<Int>;
  ingredients?: Maybe<CocktailIngredientUpdateManyWithoutCocktailInput>;
}

export interface UserCocktailScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  recommended?: Maybe<Boolean>;
  recommended_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserCocktailScalarWhereInput[] | UserCocktailScalarWhereInput>;
  OR?: Maybe<UserCocktailScalarWhereInput[] | UserCocktailScalarWhereInput>;
  NOT?: Maybe<UserCocktailScalarWhereInput[] | UserCocktailScalarWhereInput>;
}

export interface CocktailIngredientCreateInput {
  id?: Maybe<ID_Input>;
  measure: String;
  cocktail: CocktailCreateOneWithoutIngredientsInput;
  ingredient: IngredientCreateOneInput;
}

export interface UserCocktailSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserCocktailWhereInput>;
  AND?: Maybe<
    UserCocktailSubscriptionWhereInput[] | UserCocktailSubscriptionWhereInput
  >;
  OR?: Maybe<
    UserCocktailSubscriptionWhereInput[] | UserCocktailSubscriptionWhereInput
  >;
  NOT?: Maybe<
    UserCocktailSubscriptionWhereInput[] | UserCocktailSubscriptionWhereInput
  >;
}

export interface CocktailCreateOneWithoutIngredientsInput {
  create?: Maybe<CocktailCreateWithoutIngredientsInput>;
  connect?: Maybe<CocktailWhereUniqueInput>;
}

export interface CocktailIngredientCreateManyWithoutCocktailInput {
  create?: Maybe<
    | CocktailIngredientCreateWithoutCocktailInput[]
    | CocktailIngredientCreateWithoutCocktailInput
  >;
  connect?: Maybe<
    CocktailIngredientWhereUniqueInput[] | CocktailIngredientWhereUniqueInput
  >;
}

export interface CocktailCreateWithoutIngredientsInput {
  id?: Maybe<ID_Input>;
  name: String;
  alcoholic: Boolean;
  imageUrl: String;
  starterPack: Boolean;
  totalRating?: Maybe<Int>;
  totalVotes?: Maybe<Int>;
  recommendedCount?: Maybe<Int>;
}

export interface CocktailWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  alcoholic?: Maybe<Boolean>;
  alcoholic_not?: Maybe<Boolean>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  starterPack?: Maybe<Boolean>;
  starterPack_not?: Maybe<Boolean>;
  totalRating?: Maybe<Int>;
  totalRating_not?: Maybe<Int>;
  totalRating_in?: Maybe<Int[] | Int>;
  totalRating_not_in?: Maybe<Int[] | Int>;
  totalRating_lt?: Maybe<Int>;
  totalRating_lte?: Maybe<Int>;
  totalRating_gt?: Maybe<Int>;
  totalRating_gte?: Maybe<Int>;
  totalVotes?: Maybe<Int>;
  totalVotes_not?: Maybe<Int>;
  totalVotes_in?: Maybe<Int[] | Int>;
  totalVotes_not_in?: Maybe<Int[] | Int>;
  totalVotes_lt?: Maybe<Int>;
  totalVotes_lte?: Maybe<Int>;
  totalVotes_gt?: Maybe<Int>;
  totalVotes_gte?: Maybe<Int>;
  recommendedCount?: Maybe<Int>;
  recommendedCount_not?: Maybe<Int>;
  recommendedCount_in?: Maybe<Int[] | Int>;
  recommendedCount_not_in?: Maybe<Int[] | Int>;
  recommendedCount_lt?: Maybe<Int>;
  recommendedCount_lte?: Maybe<Int>;
  recommendedCount_gt?: Maybe<Int>;
  recommendedCount_gte?: Maybe<Int>;
  ingredients_every?: Maybe<CocktailIngredientWhereInput>;
  ingredients_some?: Maybe<CocktailIngredientWhereInput>;
  ingredients_none?: Maybe<CocktailIngredientWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CocktailWhereInput[] | CocktailWhereInput>;
  OR?: Maybe<CocktailWhereInput[] | CocktailWhereInput>;
  NOT?: Maybe<CocktailWhereInput[] | CocktailWhereInput>;
}

export interface CocktailIngredientUpdateInput {
  measure?: Maybe<String>;
  cocktail?: Maybe<CocktailUpdateOneRequiredWithoutIngredientsInput>;
  ingredient?: Maybe<IngredientUpdateOneRequiredInput>;
}

export interface UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput;
  create: UserCreateWithoutVotesInput;
}

export interface CocktailUpdateOneRequiredWithoutIngredientsInput {
  create?: Maybe<CocktailCreateWithoutIngredientsInput>;
  update?: Maybe<CocktailUpdateWithoutIngredientsDataInput>;
  upsert?: Maybe<CocktailUpsertWithoutIngredientsInput>;
  connect?: Maybe<CocktailWhereUniqueInput>;
}

export type CocktailIngredientWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CocktailUpdateWithoutIngredientsDataInput {
  name?: Maybe<String>;
  alcoholic?: Maybe<Boolean>;
  imageUrl?: Maybe<String>;
  starterPack?: Maybe<Boolean>;
  totalRating?: Maybe<Int>;
  totalVotes?: Maybe<Int>;
  recommendedCount?: Maybe<Int>;
}

export type IngredientWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface CocktailUpsertWithoutIngredientsInput {
  update: CocktailUpdateWithoutIngredientsDataInput;
  create: CocktailCreateWithoutIngredientsInput;
}

export interface CocktailUpdateManyWithWhereNestedInput {
  where: CocktailScalarWhereInput;
  data: CocktailUpdateManyDataInput;
}

export interface CocktailIngredientUpdateManyMutationInput {
  measure?: Maybe<String>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  votes_every?: Maybe<UserCocktailWhereInput>;
  votes_some?: Maybe<UserCocktailWhereInput>;
  votes_none?: Maybe<UserCocktailWhereInput>;
  queue_every?: Maybe<CocktailWhereInput>;
  queue_some?: Maybe<CocktailWhereInput>;
  queue_none?: Maybe<CocktailWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface IngredientUpdateInput {
  name?: Maybe<String>;
}

export interface CocktailUpdateWithWhereUniqueNestedInput {
  where: CocktailWhereUniqueInput;
  data: CocktailUpdateDataInput;
}

export interface IngredientUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserCocktailUpdateManyWithWhereNestedInput {
  where: UserCocktailScalarWhereInput;
  data: UserCocktailUpdateManyDataInput;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  password: String;
  email: String;
  votes?: Maybe<UserCocktailCreateManyWithoutUserInput>;
  queue?: Maybe<CocktailCreateManyInput>;
}

export interface CocktailCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  alcoholic: Boolean;
  imageUrl: String;
  starterPack: Boolean;
  totalRating?: Maybe<Int>;
  totalVotes?: Maybe<Int>;
  recommendedCount?: Maybe<Int>;
  ingredients?: Maybe<CocktailIngredientCreateManyWithoutCocktailInput>;
}

export interface UserCocktailCreateManyWithoutUserInput {
  create?: Maybe<
    UserCocktailCreateWithoutUserInput[] | UserCocktailCreateWithoutUserInput
  >;
  connect?: Maybe<
    UserCocktailWhereUniqueInput[] | UserCocktailWhereUniqueInput
  >;
}

export interface UserCocktailUpdateManyMutationInput {
  rating?: Maybe<Int>;
  recommended?: Maybe<Boolean>;
}

export interface UserCocktailCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  cocktail: CocktailCreateOneInput;
  rating: Int;
  recommended: Boolean;
}

export interface UserCreateOneWithoutVotesInput {
  create?: Maybe<UserCreateWithoutVotesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CocktailCreateOneInput {
  create?: Maybe<CocktailCreateInput>;
  connect?: Maybe<CocktailWhereUniqueInput>;
}

export interface CocktailScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  alcoholic?: Maybe<Boolean>;
  alcoholic_not?: Maybe<Boolean>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  starterPack?: Maybe<Boolean>;
  starterPack_not?: Maybe<Boolean>;
  totalRating?: Maybe<Int>;
  totalRating_not?: Maybe<Int>;
  totalRating_in?: Maybe<Int[] | Int>;
  totalRating_not_in?: Maybe<Int[] | Int>;
  totalRating_lt?: Maybe<Int>;
  totalRating_lte?: Maybe<Int>;
  totalRating_gt?: Maybe<Int>;
  totalRating_gte?: Maybe<Int>;
  totalVotes?: Maybe<Int>;
  totalVotes_not?: Maybe<Int>;
  totalVotes_in?: Maybe<Int[] | Int>;
  totalVotes_not_in?: Maybe<Int[] | Int>;
  totalVotes_lt?: Maybe<Int>;
  totalVotes_lte?: Maybe<Int>;
  totalVotes_gt?: Maybe<Int>;
  totalVotes_gte?: Maybe<Int>;
  recommendedCount?: Maybe<Int>;
  recommendedCount_not?: Maybe<Int>;
  recommendedCount_in?: Maybe<Int[] | Int>;
  recommendedCount_not_in?: Maybe<Int[] | Int>;
  recommendedCount_lt?: Maybe<Int>;
  recommendedCount_lte?: Maybe<Int>;
  recommendedCount_gt?: Maybe<Int>;
  recommendedCount_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CocktailScalarWhereInput[] | CocktailScalarWhereInput>;
  OR?: Maybe<CocktailScalarWhereInput[] | CocktailScalarWhereInput>;
  NOT?: Maybe<CocktailScalarWhereInput[] | CocktailScalarWhereInput>;
}

export interface CocktailCreateManyInput {
  create?: Maybe<CocktailCreateInput[] | CocktailCreateInput>;
  connect?: Maybe<CocktailWhereUniqueInput[] | CocktailWhereUniqueInput>;
}

export interface UserCocktailUpdateManyDataInput {
  rating?: Maybe<Int>;
  recommended?: Maybe<Boolean>;
}

export interface UserCocktailUpdateWithoutUserDataInput {
  cocktail?: Maybe<CocktailUpdateOneRequiredInput>;
  rating?: Maybe<Int>;
  recommended?: Maybe<Boolean>;
}

export interface UserCocktailUpdateWithWhereUniqueWithoutUserInput {
  where: UserCocktailWhereUniqueInput;
  data: UserCocktailUpdateWithoutUserDataInput;
}

export interface UserCocktailUpdateManyWithoutUserInput {
  create?: Maybe<
    UserCocktailCreateWithoutUserInput[] | UserCocktailCreateWithoutUserInput
  >;
  delete?: Maybe<UserCocktailWhereUniqueInput[] | UserCocktailWhereUniqueInput>;
  connect?: Maybe<
    UserCocktailWhereUniqueInput[] | UserCocktailWhereUniqueInput
  >;
  set?: Maybe<UserCocktailWhereUniqueInput[] | UserCocktailWhereUniqueInput>;
  disconnect?: Maybe<
    UserCocktailWhereUniqueInput[] | UserCocktailWhereUniqueInput
  >;
  update?: Maybe<
    | UserCocktailUpdateWithWhereUniqueWithoutUserInput[]
    | UserCocktailUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | UserCocktailUpsertWithWhereUniqueWithoutUserInput[]
    | UserCocktailUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    UserCocktailScalarWhereInput[] | UserCocktailScalarWhereInput
  >;
  updateMany?: Maybe<
    | UserCocktailUpdateManyWithWhereNestedInput[]
    | UserCocktailUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  votes?: Maybe<UserCocktailUpdateManyWithoutUserInput>;
  queue?: Maybe<CocktailUpdateManyInput>;
}

export interface UserCocktailUpsertWithWhereUniqueWithoutUserInput {
  where: UserCocktailWhereUniqueInput;
  update: UserCocktailUpdateWithoutUserDataInput;
  create: UserCocktailCreateWithoutUserInput;
}

export interface CocktailUpsertWithWhereUniqueNestedInput {
  where: CocktailWhereUniqueInput;
  update: CocktailUpdateDataInput;
  create: CocktailCreateInput;
}

export interface UserUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutVotesInput {
  create?: Maybe<UserCreateWithoutVotesInput>;
  update?: Maybe<UserUpdateWithoutVotesDataInput>;
  upsert?: Maybe<UserUpsertWithoutVotesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CocktailIngredientCreateWithoutCocktailInput {
  id?: Maybe<ID_Input>;
  measure: String;
  ingredient: IngredientCreateOneInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserCocktailPreviousValues {
  id: ID_Output;
  rating: Int;
  recommended: Boolean;
  createdAt: DateTimeOutput;
}

export interface UserCocktailPreviousValuesPromise
  extends Promise<UserCocktailPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  rating: () => Promise<Int>;
  recommended: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserCocktailPreviousValuesSubscription
  extends Promise<AsyncIterator<UserCocktailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rating: () => Promise<AsyncIterator<Int>>;
  recommended: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CocktailConnection {
  pageInfo: PageInfo;
  edges: CocktailEdge[];
}

export interface CocktailConnectionPromise
  extends Promise<CocktailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CocktailEdge>>() => T;
  aggregate: <T = AggregateCocktailPromise>() => T;
}

export interface CocktailConnectionSubscription
  extends Promise<AsyncIterator<CocktailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CocktailEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCocktailSubscription>() => T;
}

export interface AggregateUserCocktail {
  count: Int;
}

export interface AggregateUserCocktailPromise
  extends Promise<AggregateUserCocktail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserCocktailSubscription
  extends Promise<AsyncIterator<AggregateUserCocktail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Ingredient {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
}

export interface IngredientPromise extends Promise<Ingredient>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface IngredientSubscription
  extends Promise<AsyncIterator<Ingredient>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface IngredientNullablePromise
  extends Promise<Ingredient | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserCocktailConnection {
  pageInfo: PageInfo;
  edges: UserCocktailEdge[];
}

export interface UserCocktailConnectionPromise
  extends Promise<UserCocktailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserCocktailEdge>>() => T;
  aggregate: <T = AggregateUserCocktailPromise>() => T;
}

export interface UserCocktailConnectionSubscription
  extends Promise<AsyncIterator<UserCocktailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserCocktailEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserCocktailSubscription>() => T;
}

export interface CocktailIngredient {
  id: ID_Output;
  measure: String;
  createdAt: DateTimeOutput;
}

export interface CocktailIngredientPromise
  extends Promise<CocktailIngredient>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  measure: () => Promise<String>;
  cocktail: <T = CocktailPromise>() => T;
  ingredient: <T = IngredientPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CocktailIngredientSubscription
  extends Promise<AsyncIterator<CocktailIngredient>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  measure: () => Promise<AsyncIterator<String>>;
  cocktail: <T = CocktailSubscription>() => T;
  ingredient: <T = IngredientSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CocktailIngredientNullablePromise
  extends Promise<CocktailIngredient | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  measure: () => Promise<String>;
  cocktail: <T = CocktailPromise>() => T;
  ingredient: <T = IngredientPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserCocktail {
  id: ID_Output;
  rating: Int;
  recommended: Boolean;
  createdAt: DateTimeOutput;
}

export interface UserCocktailPromise
  extends Promise<UserCocktail>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  cocktail: <T = CocktailPromise>() => T;
  rating: () => Promise<Int>;
  recommended: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserCocktailSubscription
  extends Promise<AsyncIterator<UserCocktail>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  cocktail: <T = CocktailSubscription>() => T;
  rating: () => Promise<AsyncIterator<Int>>;
  recommended: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserCocktailNullablePromise
  extends Promise<UserCocktail | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  cocktail: <T = CocktailPromise>() => T;
  rating: () => Promise<Int>;
  recommended: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  firstName: String;
  lastName: String;
  password: String;
  email: String;
  createdAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  votes: <T = FragmentableArray<UserCocktail>>(args?: {
    where?: UserCocktailWhereInput;
    orderBy?: UserCocktailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  queue: <T = FragmentableArray<Cocktail>>(args?: {
    where?: CocktailWhereInput;
    orderBy?: CocktailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  votes: <T = Promise<AsyncIterator<UserCocktailSubscription>>>(args?: {
    where?: UserCocktailWhereInput;
    orderBy?: UserCocktailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  queue: <T = Promise<AsyncIterator<CocktailSubscription>>>(args?: {
    where?: CocktailWhereInput;
    orderBy?: CocktailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  votes: <T = FragmentableArray<UserCocktail>>(args?: {
    where?: UserCocktailWhereInput;
    orderBy?: UserCocktailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  queue: <T = FragmentableArray<Cocktail>>(args?: {
    where?: CocktailWhereInput;
    orderBy?: CocktailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface IngredientEdge {
  node: Ingredient;
  cursor: String;
}

export interface IngredientEdgePromise
  extends Promise<IngredientEdge>,
    Fragmentable {
  node: <T = IngredientPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IngredientEdgeSubscription
  extends Promise<AsyncIterator<IngredientEdge>>,
    Fragmentable {
  node: <T = IngredientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CocktailSubscriptionPayload {
  mutation: MutationType;
  node: Cocktail;
  updatedFields: String[];
  previousValues: CocktailPreviousValues;
}

export interface CocktailSubscriptionPayloadPromise
  extends Promise<CocktailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CocktailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CocktailPreviousValuesPromise>() => T;
}

export interface CocktailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CocktailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CocktailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CocktailPreviousValuesSubscription>() => T;
}

export interface AggregateCocktailIngredient {
  count: Int;
}

export interface AggregateCocktailIngredientPromise
  extends Promise<AggregateCocktailIngredient>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCocktailIngredientSubscription
  extends Promise<AsyncIterator<AggregateCocktailIngredient>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CocktailPreviousValues {
  id: ID_Output;
  name: String;
  alcoholic: Boolean;
  imageUrl: String;
  starterPack: Boolean;
  totalRating: Int;
  totalVotes: Int;
  recommendedCount: Int;
  createdAt: DateTimeOutput;
}

export interface CocktailPreviousValuesPromise
  extends Promise<CocktailPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  alcoholic: () => Promise<Boolean>;
  imageUrl: () => Promise<String>;
  starterPack: () => Promise<Boolean>;
  totalRating: () => Promise<Int>;
  totalVotes: () => Promise<Int>;
  recommendedCount: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CocktailPreviousValuesSubscription
  extends Promise<AsyncIterator<CocktailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  alcoholic: () => Promise<AsyncIterator<Boolean>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  starterPack: () => Promise<AsyncIterator<Boolean>>;
  totalRating: () => Promise<AsyncIterator<Int>>;
  totalVotes: () => Promise<AsyncIterator<Int>>;
  recommendedCount: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CocktailIngredientConnection {
  pageInfo: PageInfo;
  edges: CocktailIngredientEdge[];
}

export interface CocktailIngredientConnectionPromise
  extends Promise<CocktailIngredientConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CocktailIngredientEdge>>() => T;
  aggregate: <T = AggregateCocktailIngredientPromise>() => T;
}

export interface CocktailIngredientConnectionSubscription
  extends Promise<AsyncIterator<CocktailIngredientConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<CocktailIngredientEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateCocktailIngredientSubscription>() => T;
}

export interface Cocktail {
  id: ID_Output;
  name: String;
  alcoholic: Boolean;
  imageUrl: String;
  starterPack: Boolean;
  totalRating: Int;
  totalVotes: Int;
  recommendedCount: Int;
  createdAt: DateTimeOutput;
}

export interface CocktailPromise extends Promise<Cocktail>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  alcoholic: () => Promise<Boolean>;
  imageUrl: () => Promise<String>;
  starterPack: () => Promise<Boolean>;
  totalRating: () => Promise<Int>;
  totalVotes: () => Promise<Int>;
  recommendedCount: () => Promise<Int>;
  ingredients: <T = FragmentableArray<CocktailIngredient>>(args?: {
    where?: CocktailIngredientWhereInput;
    orderBy?: CocktailIngredientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CocktailSubscription
  extends Promise<AsyncIterator<Cocktail>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  alcoholic: () => Promise<AsyncIterator<Boolean>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  starterPack: () => Promise<AsyncIterator<Boolean>>;
  totalRating: () => Promise<AsyncIterator<Int>>;
  totalVotes: () => Promise<AsyncIterator<Int>>;
  recommendedCount: () => Promise<AsyncIterator<Int>>;
  ingredients: <
    T = Promise<AsyncIterator<CocktailIngredientSubscription>>
  >(args?: {
    where?: CocktailIngredientWhereInput;
    orderBy?: CocktailIngredientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CocktailNullablePromise
  extends Promise<Cocktail | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  alcoholic: () => Promise<Boolean>;
  imageUrl: () => Promise<String>;
  starterPack: () => Promise<Boolean>;
  totalRating: () => Promise<Int>;
  totalVotes: () => Promise<Int>;
  recommendedCount: () => Promise<Int>;
  ingredients: <T = FragmentableArray<CocktailIngredient>>(args?: {
    where?: CocktailIngredientWhereInput;
    orderBy?: CocktailIngredientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CocktailEdge {
  node: Cocktail;
  cursor: String;
}

export interface CocktailEdgePromise
  extends Promise<CocktailEdge>,
    Fragmentable {
  node: <T = CocktailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CocktailEdgeSubscription
  extends Promise<AsyncIterator<CocktailEdge>>,
    Fragmentable {
  node: <T = CocktailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CocktailIngredientSubscriptionPayload {
  mutation: MutationType;
  node: CocktailIngredient;
  updatedFields: String[];
  previousValues: CocktailIngredientPreviousValues;
}

export interface CocktailIngredientSubscriptionPayloadPromise
  extends Promise<CocktailIngredientSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CocktailIngredientPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CocktailIngredientPreviousValuesPromise>() => T;
}

export interface CocktailIngredientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CocktailIngredientSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CocktailIngredientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CocktailIngredientPreviousValuesSubscription>() => T;
}

export interface UserCocktailEdge {
  node: UserCocktail;
  cursor: String;
}

export interface UserCocktailEdgePromise
  extends Promise<UserCocktailEdge>,
    Fragmentable {
  node: <T = UserCocktailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserCocktailEdgeSubscription
  extends Promise<AsyncIterator<UserCocktailEdge>>,
    Fragmentable {
  node: <T = UserCocktailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface IngredientConnection {
  pageInfo: PageInfo;
  edges: IngredientEdge[];
}

export interface IngredientConnectionPromise
  extends Promise<IngredientConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IngredientEdge>>() => T;
  aggregate: <T = AggregateIngredientPromise>() => T;
}

export interface IngredientConnectionSubscription
  extends Promise<AsyncIterator<IngredientConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IngredientEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIngredientSubscription>() => T;
}

export interface IngredientPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
}

export interface IngredientPreviousValuesPromise
  extends Promise<IngredientPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface IngredientPreviousValuesSubscription
  extends Promise<AsyncIterator<IngredientPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface IngredientSubscriptionPayload {
  mutation: MutationType;
  node: Ingredient;
  updatedFields: String[];
  previousValues: IngredientPreviousValues;
}

export interface IngredientSubscriptionPayloadPromise
  extends Promise<IngredientSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IngredientPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IngredientPreviousValuesPromise>() => T;
}

export interface IngredientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IngredientSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IngredientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IngredientPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  password: String;
  email: String;
  createdAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CocktailIngredientPreviousValues {
  id: ID_Output;
  measure: String;
  createdAt: DateTimeOutput;
}

export interface CocktailIngredientPreviousValuesPromise
  extends Promise<CocktailIngredientPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  measure: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CocktailIngredientPreviousValuesSubscription
  extends Promise<AsyncIterator<CocktailIngredientPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  measure: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CocktailIngredientEdge {
  node: CocktailIngredient;
  cursor: String;
}

export interface CocktailIngredientEdgePromise
  extends Promise<CocktailIngredientEdge>,
    Fragmentable {
  node: <T = CocktailIngredientPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CocktailIngredientEdgeSubscription
  extends Promise<AsyncIterator<CocktailIngredientEdge>>,
    Fragmentable {
  node: <T = CocktailIngredientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIngredient {
  count: Int;
}

export interface AggregateIngredientPromise
  extends Promise<AggregateIngredient>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIngredientSubscription
  extends Promise<AsyncIterator<AggregateIngredient>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserCocktailSubscriptionPayload {
  mutation: MutationType;
  node: UserCocktail;
  updatedFields: String[];
  previousValues: UserCocktailPreviousValues;
}

export interface UserCocktailSubscriptionPayloadPromise
  extends Promise<UserCocktailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserCocktailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserCocktailPreviousValuesPromise>() => T;
}

export interface UserCocktailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserCocktailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserCocktailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserCocktailPreviousValuesSubscription>() => T;
}

export interface AggregateCocktail {
  count: Int;
}

export interface AggregateCocktailPromise
  extends Promise<AggregateCocktail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCocktailSubscription
  extends Promise<AsyncIterator<AggregateCocktail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserCocktail",
    embedded: false
  },
  {
    name: "Cocktail",
    embedded: false
  },
  {
    name: "CocktailIngredient",
    embedded: false
  },
  {
    name: "Ingredient",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
